{"ast":null,"code":"import store from \"../store/index.js\";\nimport api from \"./api\";\nimport httpRequest from \"./httpRequest\";\nexport const createCart = async (userId, quantity, productItemId) => {\n  try {\n    const token = store.getState().auth.token;\n    if (!token) {\n      console.error(\"Token is not available.\");\n      return null;\n    }\n    let url = api.url.createCart;\n    const response = await httpRequest({\n      url: url,\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      data: {\n        userId: userId,\n        quantity: quantity,\n        productItemId: productItemId\n      }\n    });\n    if (response.code === 200) {\n      return response;\n    } else {\n      return response;\n    }\n  } catch (err) {\n    const errMessage = \"Error in posting login: \";\n    console.error(errMessage, err);\n    return null;\n  }\n};\n\n//Get Cart Item\nexport const getCartItem = async userId => {\n  try {\n    const token = store.getState().auth.token;\n    if (!token) {\n      console.error(\"Token is not available.\");\n      return null;\n    }\n    let url = `${api.url.getCartItem}/${userId}`;\n    const response = await httpRequest({\n      url: url,\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.code === 200) {\n      return response.data;\n    } else {\n      return null;\n    }\n  } catch (err) {\n    const errMessage = \"Error in getting productdetail: \";\n    console.error(errMessage, err);\n    return null;\n  }\n};\n\n//Update Cart Item\nexport const updateCartItem = async (userId, cartItemList) => {\n  try {\n    const token = store.getState().auth.token;\n    if (!token) {\n      console.error(\"Token is not available.\");\n      return null;\n    }\n    let url = `${api.url.updateCartItem}/${userId}`;\n    const response = await httpRequest({\n      url: url,\n      method: \"PUT\",\n      data: JSON.stringify({\n        cartItemList: cartItemList\n      }),\n      headers: {\n        // 'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.code === 200) {\n      return response;\n    } else {\n      return null;\n    }\n  } catch (err) {\n    const errMessage = \"Error in getting productdetail: \";\n    console.error(errMessage, err);\n    return null;\n  }\n};\n\n//delete cart item\nexport const deleteCartItem = async (userId, cartItemId) => {\n  try {\n    const token = store.getState().auth.token;\n    if (!token) {\n      console.error(\"Token is not available.\");\n      return null;\n    }\n    let url = `${api.url.deleteCartItem}/${userId}/${cartItemId}`;\n    const response = await httpRequest({\n      url: url,\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.code === 200) {\n      return response;\n    } else {\n      return null;\n    }\n  } catch (err) {\n    const errMessage = \"Error in getting productdetail: \";\n    console.error(errMessage, err);\n    return null;\n  }\n};","map":{"version":3,"names":["store","api","httpRequest","createCart","userId","quantity","productItemId","token","getState","auth","console","error","url","response","method","headers","Authorization","data","code","err","errMessage","getCartItem","updateCartItem","cartItemList","JSON","stringify","deleteCartItem","cartItemId"],"sources":["F:/e-commerce-kltn/client/src/services/CartService.js"],"sourcesContent":["import store from \"../store/index.js\";\r\nimport api from \"./api\";\r\nimport httpRequest from \"./httpRequest\";\r\n\r\nexport const createCart = async (userId, quantity,productItemId) => {\r\n  try {\r\n    const token = store.getState().auth.token;\r\n    if (!token) {\r\n      console.error(\"Token is not available.\");\r\n      return null;\r\n    }\r\n\r\n    let url = api.url.createCart;\r\n\r\n    const response = await httpRequest({\r\n      url: url,\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      data: { userId: userId, quantity: quantity, productItemId: productItemId },\r\n    });\r\n    if (response.code === 200) {\r\n      return response;\r\n    } else {\r\n      return response;\r\n    }\r\n  } catch (err) {\r\n    const errMessage = \"Error in posting login: \";\r\n    console.error(errMessage, err);\r\n    return null;\r\n  }\r\n};\r\n\r\n//Get Cart Item\r\nexport const getCartItem = async (userId) => {\r\n  try {\r\n\r\n    const token = store.getState().auth.token;\r\n    if (!token) {\r\n      console.error(\"Token is not available.\");\r\n      return null;\r\n    }\r\n\r\n    let url = `${api.url.getCartItem}/${userId}`;\r\n    const response = await httpRequest({\r\n      url: url,\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    if (response.code === 200) {\r\n      return response.data;\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (err) {\r\n    const errMessage = \"Error in getting productdetail: \";\r\n    console.error(errMessage, err);\r\n    return null;\r\n  }\r\n};\r\n\r\n//Update Cart Item\r\nexport const updateCartItem = async (userId,cartItemList) => {\r\n  try {\r\n\r\n    const token = store.getState().auth.token;\r\n    if (!token) {\r\n      console.error(\"Token is not available.\");\r\n      return null;\r\n    }\r\n\r\n    let url = `${api.url.updateCartItem}/${userId}`;\r\n\r\n    const response = await httpRequest({\r\n      url: url,\r\n      method: \"PUT\",\r\n      data: JSON.stringify({\r\n        cartItemList: cartItemList,\r\n      })\r\n      ,\r\n\r\n      headers: {\r\n        // 'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    if (response.code === 200) {\r\n      return response;\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (err) {\r\n    const errMessage = \"Error in getting productdetail: \";\r\n    console.error(errMessage, err);\r\n    return null;\r\n  }\r\n};\r\n\r\n\r\n//delete cart item\r\nexport const deleteCartItem = async (userId,cartItemId) => {\r\n  try {\r\n\r\n    const token = store.getState().auth.token;\r\n    if (!token) {\r\n      console.error(\"Token is not available.\");\r\n      return null;\r\n    }\r\n\r\n    let url = `${api.url.deleteCartItem}/${userId}/${cartItemId}`;\r\n\r\n    const response = await httpRequest({\r\n      url: url,\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    if (response.code === 200) {\r\n      return response;\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (err) {\r\n    const errMessage = \"Error in getting productdetail: \";\r\n    console.error(errMessage, err);\r\n    return null;\r\n  }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}