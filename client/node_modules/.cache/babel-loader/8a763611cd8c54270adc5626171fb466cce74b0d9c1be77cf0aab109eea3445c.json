{"ast":null,"code":"import axios from \"axios\";\nimport queryString from \"query-string\";\n\n// Set up default config for http requests here\n// Please have a look at here https://github.com/axios/axios#request- config for the full list of configs\nconst axiosClient = axios.create({\n  baseURL: \"http://localhost:8080/api/v1\",\n  headers: {\n    \"content-type\": \"application/json\"\n  },\n  paramsSerializer: {\n    serialize: params => queryString.stringify(params)\n  }\n});\naxiosClient.interceptors.request.use(async config => {\n  const accessToken = localStorage.getItem(\"accessToken\");\n  if (accessToken) {\n    config.headers[\"Auth-Token\"] = accessToken;\n  }\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  var _response$data;\n  if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.status) === 401) {\n    localStorage.clear();\n    window.location.href = \"/\";\n  }\n  return response;\n}, async res => {\n  const response = (res === null || res === void 0 ? void 0 : res.response) || res;\n  const {\n    status,\n    data\n  } = response;\n  const responseError = {\n    ...data,\n    status\n  };\n  // Handle errors\n  throw responseError;\n});\nexport default axiosClient;","map":{"version":3,"names":["axios","queryString","axiosClient","create","baseURL","headers","paramsSerializer","serialize","params","stringify","interceptors","request","use","config","accessToken","localStorage","getItem","response","_response$data","data","status","clear","window","location","href","res","responseError"],"sources":["F:/e-commerce-kltn/client/src/services/axiosClient.js"],"sourcesContent":["import axios from \"axios\";\r\nimport queryString from \"query-string\";\r\n\r\n// Set up default config for http requests here\r\n// Please have a look at here https://github.com/axios/axios#request- config for the full list of configs\r\nconst axiosClient = axios.create({\r\n  baseURL: \"http://localhost:8080/api/v1\",\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  paramsSerializer: {\r\n    serialize: (params) => queryString.stringify(params),\r\n  },\r\n});\r\n\r\naxiosClient.interceptors.request.use(async (config) => {\r\n  const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n  if (accessToken) {\r\n    config.headers[\"Auth-Token\"] = accessToken;\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\naxiosClient.interceptors.response.use(\r\n  (response) => {\r\n    if (response.data?.status === 401) {\r\n      localStorage.clear();\r\n      window.location.href = \"/\";\r\n    }\r\n    return response;\r\n  },\r\n  async (res) => {\r\n    const response = res?.response || res;\r\n    const { status, data } = response;\r\n\r\n    const responseError = {\r\n      ...data,\r\n      status,\r\n    };\r\n    // Handle errors\r\n    throw responseError;\r\n  }\r\n);\r\n\r\nexport default axiosClient;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,cAAc;;AAEtC;AACA;AACA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BC,OAAO,EAAE,8BAA8B;EACvCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,gBAAgB,EAAE;IAChBC,SAAS,EAAGC,MAAM,IAAKP,WAAW,CAACQ,SAAS,CAACD,MAAM;EACrD;AACF,CAAC,CAAC;AAEFN,WAAW,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EACrD,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAEvD,IAAIF,WAAW,EAAE;IACfD,MAAM,CAACR,OAAO,CAAC,YAAY,CAAC,GAAGS,WAAW;EAC5C;EAEA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEFX,WAAW,CAACQ,YAAY,CAACO,QAAQ,CAACL,GAAG,CAClCK,QAAQ,IAAK;EAAA,IAAAC,cAAA;EACZ,IAAI,EAAAA,cAAA,GAAAD,QAAQ,CAACE,IAAI,cAAAD,cAAA,uBAAbA,cAAA,CAAeE,MAAM,MAAK,GAAG,EAAE;IACjCL,YAAY,CAACM,KAAK,CAAC,CAAC;IACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;EAC5B;EACA,OAAOP,QAAQ;AACjB,CAAC,EACD,MAAOQ,GAAG,IAAK;EACb,MAAMR,QAAQ,GAAG,CAAAQ,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAER,QAAQ,KAAIQ,GAAG;EACrC,MAAM;IAAEL,MAAM;IAAED;EAAK,CAAC,GAAGF,QAAQ;EAEjC,MAAMS,aAAa,GAAG;IACpB,GAAGP,IAAI;IACPC;EACF,CAAC;EACD;EACA,MAAMM,aAAa;AACrB,CACF,CAAC;AAED,eAAexB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}